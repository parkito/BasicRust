To preserve state consistency, update related state variables in a single atomic operation.

The lock is automatically acquired by the executing thread
before entering a synchronized block and automatically released when control exits
the synchronized block, whether by the normal control path
or by throwing an exception out of the block.

But because intrinsic locks are reentrant,
if a thread tries to acquire a lock that it already holds,
the request succeeds. Reentrancy means that locks are acquired
on a per-thread rather than per-invocation basis

For each mutable state variable that may be accessed by more than one thread,
all accesses to that variable must be performed with the same lock held.
In this case, we say that the variable is guarded by that lock.

Every shared, mutable variable should be guarded by exactly one lock.
Make it clear to maintainers which lock that is.

For every invariant that involves more than one variable,
all the variables involved in that invariant must be guarded by the same lock.