1) If the reference escapes, something can use the object
before its constructor has completed the initialization and see it in an inconsistent
(partly initialized) state.
Even if the object escapes after initialization has completed, 
declaring a subclass can cause this to be violated.

2) According to JLS 17.5, final attributes of an object can be used
safely without synchronization. However, this is only true 
if the object reference is not published (does not escape)
before its constructor finished.
If you break this rule, the result is an insidious concurrency bug
that might bite you when the code is executed on a multi-core / multi-processor machines.


Accessing shared, mutable data requires using synchronization;
one way to avoid this requirement is to not share. 
If data is only accessed from a single thread, no synchronization is needed.
This technique, thread confinement, is one of the simplest ways to achieve thread safety.